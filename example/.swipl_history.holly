use_module(library(pljulia)).
use_module(library(pljulia)).
module(pljulia).
term_jlstring(cumsum([1,2,3]),X).
module(pljulia).
term_jlstring(cumsum([1,2,3]),X).
term_jlstring(cumsum([1,2,3]),X), ?? X.
?? cumsum([1,2,3]).
?? using("Plots").
?? using(q(Plots)).
?? using(q('Plots')).
??using('Plots').
??display(plot(1:10)).
??plot(1:10).
??gui.
??print(56).
??print("hello").
??print(q("hello")).
??print(q(hello)).
??gui.
X = g().
X = g(), X =.. XX.
X = g(), compound(X).
X = g(), compound_name_arity(X,N,A).
X = compound_name_arity(g,N,A).
compound_name_arity(g,N,A).
compound_name_arity(g(),N,A).
compound_non_zero_arity.
compound_non_zero_arity(g()).
compound_non_zero_arity(g(),N,A).
jl_exec("gui()").
jl_exec("print('hello')").
jl_exec("print(\"hello\")").
using('Plots').
??using('Plots').
??plotlyjs().
??print("hello").
??print("hello\n").
??plot(cumsum(randn(100))).
??gui().
??plot(cumsum(randn(100))).
??gui().
??plot(cumsum(randn(100))).
??gui().
??display(plot(cumsum(randn(100)))).
??help(plot).
??gui().
??image(randn(20,20)).
??imagesc(randn(20,20)).
??plot(randn(5,5)).
??gui().
??plot(randn(5,5));gui().
??(plot(randn(5,5)); gui()).
??(plot(randn(5,15)); gui()).
??(plot(randn(100,3)); gui()).
??(plot(cumsum(randn(100,3))); gui()).
??(plot(cumsum(randn(200,3))); gui()).
??(plot(cumsum(randn(200,3)), reuse=false); gui()).
??(plot(cumsum(randn(200,3))); gui()).
??p=45.
??x=cumsum(randn(200,3)).
??plot(x).
??gui().
??heatmap(x).
??gui().
??(heatmap(x);gui()).
??(heatmap(transpose(x));gui()).
??(heatmap(x``);gui()).
??(heatmap(x`);gui()).
`.
??(heatmap(transpose(x));gui()).
??(heatmap(transpose(cumsum(1000,5)));gui()).
??(heatmap(transpose(cumsum(randn(1000,5))));gui()).
??p=heatmap(transpose(cumsum(randn(1000,5))).
??p=heatmap(transpose(cumsum(randn(1000,5)))).
??(plot(p);gui()).
??spy(transpose(cumsum(randn(10,5)))).
??gui().
??(plot(p);gui()).
??gr().
??p=heatmap(transpose(cumsum(randn(1000,5)))).
??gui().
??(plot(p);gui()).
??(plot(heatmap(transpose(cumsum(randn(1000,5)))));gui()).
??(plot(heatmap(transpose(cumsum(randn(1000,5)))),\"reuse=false");gui()).
??(plot(heatmap(transpose(cumsum(randn(1000,5)))));gui()).
??(plot(heatmap(transpose(cumsum(randn(1000,25)))));gui()).
??(display(plot(heatmap(transpose(cumsum(randn(1000,25))))));gui()).
??(print(plot(heatmap(transpose(cumsum(randn(1000,25))))));gui()).
??(print(plot(heatmap(transpose(cumsum(randn(10,5))))));gui()).
current_op(A,B,>>).
current_op(A,B,;).
current_op(A,B,',').
current_op(A,B,+).
current_op(A,B,>).
??(print(plot(heatmap(transpose(cumsum(randn(10,5))), \"palette=:greys")));gui()).
??(print(plot(heatmap(transpose(cumsum(randn(10,5))), \"palette=:grays")));gui()).
??(print(plot(heatmap(transpose(cumsum(randn(10,5))), \"palette=:hot")));gui()).
??cgradients().
??print(cgradients()).
??(print(plot(heatmap(transpose(cumsum(randn(10,5))), \"palette=:blues")));gui()).
??(print(plot(heatmap(transpose(cumsum(randn(10,5))), \"background_color=RGB(0.2,0.2,0.2)")));gui()).
??(print(plot(heatmap(transpose(cumsum(randn(10,5))), \"background_color=RGB(0.2,0.2,0.2)", \"color_bar=false")));gui()).
??(print(plot(heatmap(transpose(cumsum(randn(10,5))), \"background_color=RGB(0.2,0.2,0.2)", \"colorbar=false")));gui()).
??'title!'("fish").
??gui().
??box(true).
??box!(true).
??'box!'(true).
??unicodeplots().
using('Plots').
module(pljulia).
using('Plots').
>>using('Plots').
??using('Plots').
??"GR.inline()".
??gr().
??display(plot(1:10)).
??gr().
??gui().
??display(plot(randn(100))).
??"GR.inline()".
??display(plot(randn(100))).
??plot(randn(100)).
??gui().
??print(45).
??print(45+10).
??67.
??display(67).
current_prolog_flag(allow_dot_in_atom ,K).
set_prolog_flag(var_prefix,true).
X=5.
set_prolog_flag(var_prefix,false).
X = a[1,2].
X = a.
current_op(A,B,??).
current_op(A,B,',').
current_op(A,B,P), P<900.
current_op(A,B,O), A<900.
current_op(A,B,O), member(B,[xfx,xfy,yfx]), A<900.
op(800,xfy,;;).
op(800,xfy,';;').
X = (a ;; b).
X = (a ';;' b).
op(800,xfy, ;>).
op(800,xfy, |>).
op(800,xfy, !>).
current_op(A,B, @>).
current_op(A,B, #>).
current_op(A,B, $>).
current_op(A,B, *>).
make.
?? 3:4.
?? print(3:4).
make.
?? 3:4.
?? collect(3:4).
?? collect(3:8).
?? collect(3:8) $> 45.
make.
debug(pljl).
?? collect(3:8) $> 45.
make.
?? collect(3:8) $> 45.
?? print(collect(3:8)) $> 45.
nodebug(pljl).
?? print(collect(3:8)) $> 45.
X = a[1,2].
module(user).
X = a[1,2].
make.
X = a[1,2].
?? print(collect(3:8)) $> 45.
?? print(collect(3:8)) :>: 45.
?? x=collect(3:8) :>: 45.
?? x.
current_op(A,B,=).
current_op(A,B,:>:).
?? x=collect(3:8) :>: 45.
X = (x=collect(3:8) :>: 45).
X =.. F.
X = (x=collect(3:8) :>: 45), X=.. F.
debug(pljl).
?? x=collect(3:8) :>: 45.
?? x.
?? x=collect(3:8) :>: 45.
?? x.
?? x=collect(3:8) :>: y=45 :>: z=12.
?? x.
?? z.
?? y.
?? zero('Float64').
nodebug(pljl).
?? zero('Float64').
?? sin(4.5)+pi.
sin(4.5) $$. .
sin(4.5) $$ x.
make.
sin(4.5) $$.
a.
make.
sin(4.5) $$. .
current_op(A,B, $$).
sin(4.5) $$ .
sin(4.5) $$. .
?? sin(4.5).
make.
?? sin(4.5).
debug(pljl).
?? sin(4.5).
make.
?? sin(4.5).
nodebug(pljl).
?? sin(4.5).
??if(true,2,3).
?? if(true,2,3).
?? if(true,2).
debug(pljl).
?? if(true,2).
make.
?? if(true,2).
?? if(false,2).
?? if(false,2,10).
current_op(A,B,~).
?? '<<'(4,2).
?? '~'(4).
?? [8,9,8].
?? sin([8,9,8]).
?? sin.([8,9,8]).
?? dot(sin,([8,9,8])).
?? map(sin,([8,9,8])).
?? 9*im.
?? [1,2,3].
?? [1,2;3,4].
?? [1;2;3].
make.
?? [1;2;3].
?? [1,2,3].
term_jlstring([1,2,3],Str).
term_jlstring(2\,Str).
term_jlstring(2,Str).
trace, term_jlstring(2,Str).
make.
?? [1,2,3].
nodebug.
?? [1,2,3].
?? [1,2,3]``.
set_prolog_flag(back_quotes,symbol).
set_prolog_flag(back_quotes,symbolchar).
set_prolog_flag(back_quotes,symbol_char).
?? [1,2,3]``.
?? `d.
?? vector([1,2,3]).
?? row([1,2,3]).
make.
?? vector([1,2,3]).
current_op(A,B,:).
op(100, fx, :).
X = :fish.
make.
?? [1,2,3]`.
?? [1,2,3].
?? [1,2,3] `.
?? [1,2,3]`.
?? [1,2,3]``.
X = a`.
make.
X = a`.
?? [1,2,3]``.
?? [1,2,3]`.
??[:a,:b,:c].
??[:a,:b,:c]`.
??[:a,:b,:c].`.
??[2,3,4].`.
?? \\print("hello").
?? \\print("hello")().
?? call(\\print("hello")).
?? x = \\print("hello")).
?? x = \\print("hello").
?? x = (\\print("hello")).
make.
?? x = (\\print("hello")).
make.
?? x = (\\print("hello")).
??ans.
make.
?? x = (\\print("hello")).
?? x().
??hcat(1,2,3).
??vcat(1,2,3).
??apply(hcat,[1,2,3]).
??apply(vcat,[1,2,3]).
??apply(\\print("hello"), []).
make.
??apply(\\print("hello"), []).
??apply(\\print("hello\n"), []).
??apply((x,y)\\x+y, [1,2]).
??apply([x,y]\\x+y, [1,2]).
??apply((x,y)\\x+y, [1,2]).
??apply((X,Y)\\X+Y, [1,2]).
??apply(()\\3+5, []).
??apply([]\\3+5, []).
make.
??[]\\print("hello\n").
??[]\\print("hello\\n").
??apply([]\\print("hello\\n"), []).
??apply([X,Y]\\print(X+Y), [2,3]).
??apply([X,Y]\\println(X+Y), [2,3]).
?? 1:2:10.
make.
?? 1:2:10.
?? collect(1:2:10).
?? (1:10)`.
?? arr([[1,2,3],[4,5,6]]).
make.
?? arr([[1,2,3],[4,5,6]]).
make.
?? arr([[1,2,3],[4,5,6]]).
make.
?? arr([[1,2,3],[4,5,6]]).
?? using('Plots').
make.
?? using('Plots').
?? gr().
?? heatmap(arr([[1,2,3],[4,5,6]])).
??backend().
??backends().
??gui().
??'title!'("hello").
??gui().
?? 'Plots'#plot.
make.
?? 'Plots'#plot.
?? 'Plots'.plot.
make.
?? apply(bcast(*),[[1,2,3],[3,4,5]']).
'.
?? apply(bcast(*),[[1,2,3],[3,4,5]`]).
?? apply(dot(*),[[1,2,3],[3,4,5]`]).
make.
?? apply(dot(*),[[1,2,3],[3,4,5]`]).
?? apply(dot(*),tuple([[1,2,3],[3,4,5]`])).
??tuple([1,2,3]).
?? apply(dot(*),tuple([[1,2,3],[3,4,5]`])).
?? apply(dot,tuple([[1,2,3],[3,4,5]`])).
?? apply(dot(*),[tuple([[1,2,3],[3,4,5]`])]).
make.
?? apply(dot(*),[tuple([[1,2,3],[3,4,5]`])]).
make.
?? apply(dot(*),[tuple([[1,2,3],[3,4,5]`])]).
?? apply(dot(*),[tuple([[1,2,3],[3,4,5]])]).
make.
?? apply(dot(*),[tuple([[1,2,3],[3,4,5]])]).
?? apply(dot(*),[[1,2,3],[3,4,5]])).
?? apply(dot(*),[[1,2,3],[3,4,5]]).
?? bcast(*,[[1,2,3],[3,4,5]]).
make.
?? bcast(*,[1,2,3],[3,4,5]).
?? bcast(*,[1,2,3],[3,4,5]`).
?? bcast(rem,[1,2,3],[3,4,5]`).
X = a[1,2,3].
X = a[1,2,3], writeq(X).
X = a[1,2,3], write_canonical(X).
make.
X = a[1,2,3], write_canonical(X).
X = a{1,2,3}, write_canonical(X).
make.
X = a{1,2,3}, write_canonical(X).
X = a {1,2,3}.
X = a{1,2,3}.
X = a {1,2,3}, write_canonical(X).
X = a[1,2,3], write_canonical(X).
make.
X = a[1,2,3], write_canonical(X).
X = []([8,9
],k).
make.
?? [1,2,3][1].
?? [1,2,3][2].
?? magic(5)[2].
?? ones(5)[2].
?? ones(5)[:].
?? rand(5)[:].
?? rand(5,6)[:].
?? rand(5,6)[:,2].
?? 'Any'[5,2].
?? q(o).
?? qq(o).
?? inf.
?? 'Inf'.
?? 'Nan'.
?? 'NaN'.
?? 'Nan'.
op(300,fx,'.').
X = .45.
op(300,xf,'.').
X = 45.
X = a.
X = .(a).
X = .a.
make.
?? 'GR'`plot.
?? 'GR' ` plot.
?? 'GR' # plot.
?? 'GR' ` plot.
X = a ` b.
X = a`.
X = a '`' b.
?? sin @ [1].
make.
?? sin @ [1].
X = a '`' b.
X = a ` b.
?? 'GR' ` plot.
?? 'GR'`plot.
?? #[1,2,3].
trace, ?? #[1,2,3].
X = #[1,3,4].
X = # [1,3,4].
X = # [1,3,4], X=..F.
X = +[1,2,3].
X = +([1,2,3]).
X = +([1,2,3]), X=..F.
X = +[1,2,3], X=..F.
X = #[1,2,3], X=..F.
X = #([1,2,3]), X=..F.
?? #([1,2,3]).
make.
X = #([1,2,3]), X=..F.
X = #[1,2,3], X=..F.
X = /[1,2,3], X=..F.
make.
X = /[1,2,3], X=..F.
X = #[1,2,3], X=..F.
X = +[1,2,3], X=..F.
current_op(A,B,+).
current_op(A,B,#).
make.
current_op(A,B,#).
make.
current_op(A,B,#).
make.
current_op(A,B,#).
X = #[1,2,3], X=..F.
make.
?? #(1,2,3).
?? #(1,2,3,4).
?? .sin @ [[1,2,3]].
.(*) @ [[1,2,3],[4,5,6]].
?? .(*) @ [[1,2,3],[4,5,6]].
?? .(*) @ [[1,2,3],[4,5,6]`].
?? .(*)@[[1,2,3],[4,5,6]`].
make.
?? .(*)@[[1,2,3],[4,5,6]`].
?? (*).@[[1,2,3],[4,5,6]`].
?? (*) .@ [[1,2,3],[4,5,6]`].
make.
?? (*) .@ [[1,2,3],[4,5,6]`].
?? * .@ [[1,2,3],[4,5,6]`].
?? rem .@ [[1,2,3],[4,5,6]`].
?? ^ .@ [[1,2,3],[4,5,6]`].
?? #(x,y) = #(45,23).
?? x.
?? y.
\[1,2,3] =.. F.
X = `[1,2,3].
`[1,2,3] =.. F.
X = `a.
?? `a.
?? `a.
.
a
`.
set_prolog_flag(back_quotes,symbol_char).
X = `a.
X = `[1,2,4].
`[1,2,4] =.. F.
make.
?? #[1,2,3].
?? #[1,2,3,6,5,3].
`[1,2,3].
?? `[1,2,3].
.a[1,2,3] =.. X.
.*[1,2,3] =.. X.
*[1,2,3] =.. X.
.(*)[1,2,3] =.. X.
.(*)[1,2] =.. X.
* .@ [1,2].
?? * .@ [1,2].
.(*)[1,2] =.. X.
(.
*)[1,2] =.. X.
.(*)[1,2] =.. X.
.rem[1,2] =.. X.
?? .rem[[1,2,4],`[3,4,5]].
?? rem .@[[1,2,4],`[3,4,5]].
debug(pljl).
?? rem .@[[1,2,4],`[3,4,5]].
?? .rem[[1,2,4],`[3,4,5]].
??display(plot(1:10)).
??using('Plots').
??display(plot(1:10)).
??gr().
??display(plot(1:10)).
jl_exec("display(plot(1:10))").
jl_exec("show(plot(1:10))").
??backends().
gui().
??gui.
??gui().
?? 'PlotsDisplay'().
?? Plots`'PlotsDisplay'().
?? 'Plots'`'PlotsDisplay'().
?? display('Plots'`'PlotsDisplay'(), plot(1:20)).
?? display('Plots'`'PlotsDisplay'(), plot(1:10)).
??plotlyjs().
?? display('Plots'`'PlotsDisplay'(), plot(1:10)).
?? display('Plots'`'PlotsDisplay'(), plot(randn(10)).
?? display('Plots'`'PlotsDisplay'(), plot(randn(10))).
?? :a.
?? :(a+b).
make.
?? :(a+b).
make.
?? :(a+b).
make.
?? f(a...).
X = (a...).
make.
X = (a...).
?? f(a...).
make.
?? f(a...).
?? colon([1,5]...).
?? display('Plots'`'PlotsDisplay'(), plot(randn(10))).
?? plot(randn(10)) :>: gui().
??gr().
?? plot(randn(10)) :>: gui().
?? plot(randn(10)) :>: 'xlabel!'("time") :>: gui().
?? plot(randn(10)) :>: 'xlabel!'("time") :>: 'ylabel!'("greatness") :>: gui().
??plotlyjs().
?? plot(randn(10)) :>: 'xlabel!'("time") :>: 'ylabel!'("greatness") :>: gui().
?? using('Blink').
?? w='Window'().
?? 'body!'(w,"Hello!").
?? 'body!'(w,"Hello there!").
?? 'body!'(w,"<b>Hello there!</b>").
?? 'body!'(w,"<i>Hello there!</i>").
?? 'body!'(w,"<h2>Hello there!</h2>").
??using('Plots').
??glvisualize().
??plot(cumsum(randn(100))) :>: gui().
??plot(cumsum(randn(100)), framestyle= :box) :>: gui().
??theme(:juno).
??plot(cumsum(randn(100)), framestyle= :box) :>: gui().
??using('Plots').
??glvisualize().
??plot(cumsum(randn(100)), framestyle= :box) :>: gui().
??theme(:juno).
??plot(cumsum(randn(100)), framestyle= :box) :>: gui().
??clibraries().
??showlibrary(:'Plots').
??gui().
??using('Plots').
??plot(cumsum(randn(100)), framestyle= :box) :>: gui().
??showlibrary(:'Plots').
??gui().
??showlibrary(:colorcet).
??gui().
??heatmap(rand(10,10)) :>: gui().
??theme(:juno).
??heatmap(rand(10,10)) :>: gui().
??heatmap(rand(10,10), color= :blues) :>: gui().
??heatmap(rand(10,10), color= :fire) :>: gui().
??heatmap(rand(10,10), color= :inferno) :>: gui().
??heatmap(rand(10,10), color= :fire) :>: gui().
??default(:color, :fire).
??heatmap(rand(10,10)) :>: gui().
??default(:framestyle, :box).
??heatmap(rand(10,10)) :>: gui().
??heatmap(rand(10,10), size=#(200,200)) :>: gui().
??heatmap(rand(10,10), size= #(200,200)) :>: gui().
??heatmap(rand(10,10), size= #(400,200)) :>: gui().
??heatmap(rand(10,10), size= #(800,600)) :>: gui().
??plot(cumsum(randn(100)), framestyle= :box) :>: gui().
??plotlyjs().
??plot(cumsum(randn(100))) :>: gui().
??plot(cumsum(randn(100)), color= :blues) :>: gui().
??plot(cumsum(randn(100)), color= :magma) :>: gui().
??heatmap(cumsum(randn(100,10))) :>: gui().
??heatmap(cumsum(randn(100,10))`) :>: gui().
.
`.
set_prolog_flag(back_quotes,symbol_char).
??heatmap(cumsum(randn(100,10))`) :>: gui().
??heatmap(cumsum(randn(100,10))`, size= #(600,400)) :>: gui().
??heatmap(cumsum(randn(100,10))`, size= #(300,200)) :>: gui().
??heatmap(cumsum(randn(100,10))`) :>: gui().
persistent_history.
% Mon Dec 11 15:17:42 2017 | Start: swipl -g use_module(library(pljulia))
% Mon Dec 11 15:17:44 2017 | Halt
% Mon Dec 11 15:19:04 2017 | Start: swipl -s examples.pl
ed.
edit.
??45.
edit.
edit(pljulia).
debug(pljl).
??45.
??plotlyjs().
??showlibrary(:colorbrewer).
??gui().
??showlibrary(:misc) :>: gui().
??showlibrary(:'Plots') :>: gui().
edit.
% Mon Dec 11 15:24:33 2017 | Halt
% Mon Dec 11 15:24:36 2017 | Start: swipl -s examples.pl
% Mon Dec 11 15:25:07 2017 | Halt
% Mon Dec 11 15:26:41 2017 | Start: swipl -s examples.pl
jpl heatmap(cumsum(randn(50,50))).
jpl plot(cumsum(randn(50,5))).
edit.
??unicodeplots().
??plot(cumsum(randn(20))).
??plot(cumsum(randn(200))).
??plot(cumsum(randn(200,5))).
edit.
??histogram(randn(100)).
??histogram(floor(20*randn(100))).
??histogram('floor.'(20*randn(100))).
??histogram(floor.@[20*randn(100)]).
??histogram(floor.@[50*randn(100)]).
??histogram(floor.@[50*randn(1000)]).
??plotlyjs().
jpl plot(cumsum(randn(50))).
?? 'plot!'(cumsum(randn(50))).
jpl 'plot!'(cumsum(randn(50))).
% Mon Dec 11 16:16:58 2017 | Halt
% Mon Dec 11 16:17:00 2017 | Start: swipl -s examples.pl
edit.
backend(plotlyjs).
jpl 'plot'(cumsum(randn(50))).
jpl 'plot!'(cumsum(randn(50))).
between(1,10,_), jpl 'plot!'(cumsum(randn(50))), fail.
backend(gr).
jpl 'plot'(cumsum(randn(50))).
??default(:framestyle, :box).
jpl 'plot'(cumsum(randn(50))).
between(1,10,_), jpl 'plot!'(cumsum(randn(50))), fail.
jpl scatter(randn(1000,2)).
jpl scatter(randn(1000,2), marker_size = 2).
jpl scatter(randn(1000,2), markersize = 2).
jpl scatter(randn(1000), randn(1000), markersize = 2).
jpl scatter(randn(1000), randn(1000), markersize = 1).
jpl scatter(randn(10000), randn(10000), markersize = 1).
??theme(:juno).
jpl scatter(randn(10000), randn(10000), markersize = 1).
jpl scatter(randn(10000), randn(10000), markersize = 3).
jpl scatter(randn(1000), randn(1000), markersize = 3).
??theme(:dark).
jpl scatter(randn(1000), randn(1000), markersize = 3).
??theme(:juno).
jpl scatter(randn(1000), randn(1000), markersize = 3).
jpl heatmap(cumsum(randn(50,50))).
??theme(:dark).
jpl heatmap(cumsum(randn(50,50))).
??theme(:juno).
jpl heatmap(cumsum(randn(50,50))).
jpl scatter(randn(1000), randn(1000), markersize = 3).
jpl scatter(randn(1000), randn(1000), markersize = 5).
jpl scatter(randn(1000), randn(1000)).
jpl scatter(randn(1000), randn(1000), markersize = 4).
jpl scatter(randn(1000), randn(1000), markersize = 3).
jpl scatter(randn(1000), randn(1000), markersize = 2).
jpl scatter(randn(1000), randn(1000), markersize = 3).
??plotlyjs(size= #(300,200)).
jpl scatter(randn(1000), randn(1000), markersize = 3).
jpl scatter(randn(1000), randn(1000), markersize = 2).
??plotlyjs(size= #(400,300)).
jpl scatter(randn(1000), randn(1000), markersize = 2).
??plotlyjs(size= #(500,350)).
jpl scatter(randn(1000), randn(1000), markersize = 2).
??plotlyjs(size= #(450,300)).
jpl scatter(randn(1000), randn(1000), markersize = 2).
% Mon Dec 11 16:57:42 2017 | Halt
% Mon Dec 11 16:57:45 2017 | Start: swipl -s examples.pl
% Mon Dec 11 16:57:45 2017 | Halt
% Mon Dec 11 16:57:50 2017 | Start: swipl -s examples.pl
jl_eval(5+6,int(X)).
trace, jl_eval(5+6,int(X)).
trace, jl_eval(5+6,X).
jl_eval.
jl_eval(println("hello"), X).
jl_exec(println("hello")).
jl_eval("5+6",int(X)).
jl_eval("5+6",float(X)).
jl_eval("5.0+6",float(X)).
nodebug.
jpl scatter(randn(1000), randn(1000), markersize = 2).
jpl scatter(rand(10,4), markershape = [:circle, :rect]).
jpl scatter(rand(10,4), markershape = [:circle :rect]).
jpl scatter(rand(10,4), markershape = `[:circle, :rect]).
jpl scatter(rand(10,4), markershape = [:circle :rect]).
jpl scatter(rand(10,4), markershape = [:circle, :rect]).
jpl scatter(rand(10,4), markershape = [:circle, :rect]`).
jpl scatter(rand(10,4), markershape = `[:circle, :rect]).
% Mon Dec 11 21:18:10 2017 | Halt
% Mon Dec 11 21:21:08 2017 | Start: swipl -s examples.pl
??plotlyjs(size= #(450,300)).
??plot(cumsum(randn(200,5))).
??plot(cumsum(randn(200,5)), show=true).
??heatmap(cumsum(randn(200,5)), show=true).
??heatmap(cumsum(randn(200,5)), color= :heat, show=true).
??heatmap(cumsum(randn(200,5)), color= :fire, show=true).
??heatmap(cumsum(randn(100,25)), color= :fire, show=true).
??heatmap(cumsum(randn(50,25)), color= :fire, show=true).
??heatmap(cumsum(randn(25,25)), color= :fire, show=true).
??'RGBA'(1,1,1,1).
??'RGB'(1,1,1).
??heatmap(cumsum(randn(25,25)), color= :fire, background_color='RGB'(1,0.2,0.2,0.2), show=true).
??heatmap(cumsum(randn(25,25)), color= :fire, background_color='RGB'(0.2,0.2,0.2), show=true).
??heatmap(cumsum(randn(25,25)), color= :fire, background_color_outside='RGB'(0.2,0.2,0.2), show=true).
??heatmap(cumsum(randn(25,25)), color= :fire, background_color='RGB'(0.2,0.2,0.2), show=true).
??heatmap(cumsum(randn(25,25)), color= :fire, background_color='RGB'(0.2,0.2,0.2), framestyle= :box, show=true).
backend(gr).
??heatmap(cumsum(randn(25,25)), color= :fire, background_color='RGB'(0.2,0.2,0.2), framestyle= :box, show=true).
??heatmap(cumsum(randn(25,25)), color= :fire, background_color_outside='RGB'(0.2,0.2,0.2), framestyle= :box, show=true).
??heatmap(cumsum(randn(25,25)), color= :fire, background_color='RGB'(0.2,0.2,0.2), framestyle= :box, show=true).
??heatmap(cumsum(randn(25,25)), color= :fire, background_color_outside='RGB'(0.2,0.2,0.2), framestyle= :box, show=true).
??heatmap(cumsum(randn(25,25)), color= :fire, background_color='RGB'(0.2,0.2,0.2), framestyle= :box, show=true).
??gui().
??heatmap(cumsum(randn(25,25)), color= :fire, background_color='RGB'(0.2,0.2,0.2), framestyle= :box, show=true).
backend(plotlyjs).
??heatmap(cumsum(randn(25,25)), color= :fire, background_color='RGB'(0.2,0.2,0.2), framestyle= :box, show=true).
??heatmap(cumsum(randn(25,25)), color= :fire, background_color='RGB'(0.2,0.2,0.2), foreground_color= :red, framestyle= :box, show=true).
??heatmap(cumsum(randn(25,25)), color= :fire, background_color= :black, foreground_color= :red, framestyle= :box, show=true).
??heatmap(cumsum(randn(25,25)), color= :fire, background_color= :black, foreground_color_legend= :red, framestyle= :box, show=true).
??heatmap(cumsum(randn(25,25)), color= :fire, background_color= :black, foreground_color= :red, framestyle= :box, show=true).
??heatmap(cumsum(randn(25,25)), background_color= :black, foreground_color= :red, framestyle= :box, show=true).
??default(:palette, :fire).
??heatmap(cumsum(randn(25,25)), background_color= :black, foreground_color= :red, framestyle= :box, show=true).
??heatmap(cumsum(randn(25,25)), framestyle= :box, show=true).
??theme(:juno).
??heatmap(cumsum(randn(25,25)), framestyle= :box, show=true).
??default(:gradient, :fire).
??heatmap(cumsum(randn(25,25)), framestyle= :box, show=true).
??default(:color_radient, :fire).
??default(:color_gradient, :fire).
??default(:colormap, :fire).
??default(:palette, :fire).
??heatmap(cumsum(randn(25,25)), palette= :fire, framestyle= :box, show=true).
??heatmap(cumsum(randn(25,25)), colorbar= false, framestyle= :box, show=true).
??heatmap(cumsum(randn(25,25)), color= :fire, framestyle= :box, show=true).
edit.
??default(:colorbar, false).
edit.
??heatmap(cumsum(randn(25,25)), color= :fire).
edit.
??heatmap(cumsum(randn(25,25)), color= :fire).
?? int8(20).
?? Int8(20).
?? 'Int8'(20).
jl_eval("5.0+6",float(X)).
jl_eval("25",float(X)).
jl_eval("25",int(X)).
jl_eval("Int64(25)",int(X)).
jl_eval("Int8(25)",int(X)).
jl_eval("Int8(400)",int(X)).
jl_eval("Int8(40)",int(X)).
jl_eval("Int32(40)",int(X)).
jl_eval("Float64(4.892e8)",float(X)).
jl_eval("Float64(4.123456789)",float(X)).
jl_eval("Float64(4.123456789012345)",float(X)).
jl_eval("Float64(4.1234567890123456789)",float(X)).
jl_eval("Float32(4.1234567890123456789)",float(X)).
% Mon Dec 11 22:34:04 2017 | Halt
% Mon Dec 11 22:34:06 2017 | Start: swipl -s examples.pl
